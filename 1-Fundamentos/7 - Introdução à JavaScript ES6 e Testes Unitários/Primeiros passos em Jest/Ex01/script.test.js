// ðŸš€ 1 - A funÃ§Ã£o sum(a, b) retorna a soma do parÃ¢metro a com o b
// Teste se o retorno de sum(4, 5) Ã© 9
// Teste se o retorno de sum(0, 0) Ã© 0
// Teste se a funÃ§Ã£o sum lanÃ§a um erro quando os parÃ¢metros sÃ£o 4 e "5"(string 5)
// Teste se a mensagem de erro Ã© "parameters must be numbers" quando realizar a chamada sum(4, "5")


const {sum, myRemove, myFizzBuzz, searchEmployee} = require('./script')

// describe('1 - A funÃ§Ã£o sum(a, b) retorna a soma do parÃ¢metro a com o b', () => {
//     it('Teste se o retorno de sum(4, 5) Ã© 9', () => {
//         expect(sum(4,5)).toBe(9)
//     });
//     it('Teste se o retorno de sum(0, 0) Ã© 0', () => {
//         expect(sum(0,0)).toBe(0)
//     });
//     it('Teste se a funÃ§Ã£o sum lanÃ§a um erro quando os parÃ¢metros sÃ£o 4 e "5"(string 5)', () => {
//         expect(() => sum(4,'5')).toThrow()
//     });
//     it('Teste se a mensagem de erro Ã© "parameters must be numbers" quando realizar a chamada sum(4, "5")', () => {
//         expect(() => sum(4,'5') ).toThrow('parameters must be numbers')
//     })
// });


//ðŸš€ 2 - A funÃ§Ã£o myRemove(arr, item) recebe um array arr e retorna uma cÃ³pia desse array sem o elemento item caso ele exista no array
// Verifique se a chamada myRemove([1, 2, 3, 4], 3) retorna o array esperado
// Verifique se a chamada myRemove([1, 2, 3, 4], 3) nÃ£o retorna o array [1, 2, 3, 4]
// Verifique se a chamada myRemove([1, 2, 3, 4], 5) retorna o array esperado


// describe('2 - A funÃ§Ã£o myRemove(arr, item) recebe um array arr e retorna uma cÃ³pia desse array sem o elemento item caso ele exista no array', () => {
//     it('Verifique se a chamada myRemove([1, 2, 3, 4], 3) retorna o array esperado', () => {
//         expect(myRemove([1, 2, 3, 4], 3)).toEqual([1, 2, 4])
//     })
//     it('Verifique se a chamada myRemove([1, 2, 3, 4], 3) nÃ£o retorna o array [1, 2, 3, 4]', () => {
//         expect(myRemove([1, 2, 3, 4], 3)).not.toEqual([1, 2, 3, 4])
//     })
//     it('Verifique se a chamada myRemove([1, 2, 3, 4], 5) retorna o array esperado', () => {
//         expect(myRemove([1, 2, 3, 4], 5)).toEqual([1, 2, 3, 4])
//     })
// })

// ðŸš€ 3 - A funÃ§Ã£o myFizzBuzz(num) recebe um nÃºmero num e retorna "fizzbuzz" se o nÃºmero for divisÃ­vel por 3 e 5, retorna "fizz" se for divisÃ­vel apenas por 3, retorna "buzz" se divisÃ­vel apenas por 5, retorna o prÃ³prio nÃºmero caso nÃ£o seja divisÃ­vel por 3 ou 5 e retorna false caso num nÃ£o seja um nÃºmero
// FaÃ§a uma chamada com um nÃºmero divisÃ­vel por 3 e 5 e verifique se o retorno Ã© o esperado
// FaÃ§a uma chamada com um nÃºmero divisÃ­vel por 3 e verifique se o retorno Ã© o esperado
// FaÃ§a uma chamada com um nÃºmero divisÃ­vel por 5 e verifique se o retorno Ã© o esperado
// FaÃ§a uma chamada com um nÃºmero que nÃ£o Ã© divisÃ­vel por 3 ou 5 e verifique se o retorno Ã© o esperado
// FaÃ§a uma chamada com um parÃ¢metro que nÃ£o Ã© um nÃºmero e verifique se o retorno Ã© o esperado

// describe('FunÃ§Ã£o FizzBuzz', () => {
//     it('FaÃ§a uma chamada com um nÃºmero divisÃ­vel por 3 e 5 e verifique se o retorno Ã© o esperado', () => {
//         expect(myFizzBuzz(15)).toBe('fizzbuzz')
//     })
//     it('FaÃ§a uma chamada com um nÃºmero divisÃ­vel por 3 e verifique se o retorno Ã© o esperado', () => {
//         expect(myFizzBuzz(9)).toBe('fizz')
//     })
//     it('FaÃ§a uma chamada com um nÃºmero divisÃ­vel por 5 e verifique se o retorno Ã© o esperado', () => {
//         expect(myFizzBuzz(10)).toBe('buzz')
//     })
//     it('FaÃ§a uma chamada com um nÃºmero que nÃ£o Ã© divisÃ­vel por 3 ou 5 e verifique se o retorno Ã© o esperado', () => {
//         expect(myFizzBuzz(17)).toBe(17)
//     })
//     it('FaÃ§a uma chamada com um parÃ¢metro que nÃ£o Ã© um nÃºmero e verifique se o retorno Ã© o esperado', () => {
//         expect(myFizzBuzz('NaN')).toBe(false)
//     })
// })


describe('Requisito Bonus', () => {

    it('Verifica se a funÃ§Ã£o searchEmployee existe', () => {
        expect(typeof(searchEmployee)).toBe('function')
    })

    it('Verifica se retorna erro quando passamos um ID inexistente', () => {
        expect(() => searchEmployee('12345-6', 'firsName')).toThrow('ID nÃ£o identificada')
    })

    it('Verifica se retorna erro quando passamos uma chave inexistente', () => {
        expect(() => searchEmployee('4456-4', 'colorEyes')).toThrow('InformaÃ§Ã£o indisponÃ­vel');
    })

    it('Verifica se retorna Ana quando o id Ã© 8579-6 e a chave Ã© firstName', () => {
        expect(searchEmployee('8579-6', 'firstName')).toBe('Ana')
    })

    it('Verifica se retorna Jobs quando o id Ã© 5569-4 e a chave Ã© lastName', () => {
        expect(searchEmployee('5569-4', 'lastName')).toBe('Jobs')
    })

    it('Verifica se retorna ["Context API", "RTL", "Bootstrap"] quando o id Ã© 4456-4 e a chave Ã© specialities', () => {
        expect(searchEmployee('4456-4', 'specialities')).toEqual(["Context API", "RTL", "Bootstrap"])
    })

    it('Verifica se retorna Paul quando o id Ã© 4678-2 e a chave Ã© firstName', () => {
        expect(searchEmployee('4678-2', 'firstName')).toBe('Paul')
    })
    

    



})