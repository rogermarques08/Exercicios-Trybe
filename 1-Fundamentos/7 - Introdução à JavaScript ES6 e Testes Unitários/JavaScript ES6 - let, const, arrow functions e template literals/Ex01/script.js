// üöÄ Altere o tipo das vari√°veis(var) para let ou const para que respeitem o escopo em que foram declaradas, e altere a fun√ß√£o utilizando arrow function e template literals.
// Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function;
// Modifique as vari√°veis para que respeitem o escopo onde est√£o declaradas;
// Modifique as concatena√ß√µes para template literals.

// const testingScope = (escopo) => {
//   if (escopo === true) {
//     let ifScope = "N√£o devo ser utilizada fora do meu escopo (if)";
//     ifScope = `${ifScope} √≥timo, fui utilizada no escopo !`;
//     console.log(ifScope);
//   } else {
//     var elseScope = "N√£o devo ser utilizada fora meu escopo (else)";
//     console.log(elseScope);
//   }
//   console.log(ifScope + " o que estou fazendo aqui ? :O"); // Se necess√°rio esta linha pode ser removida.
// }

// testingScope(true);


// üöÄ Crie uma fun√ß√£o que retorne um array em ordem crescente.
// Crie uma fun√ß√£o que fa√ßa com que o array oddsAndEvens fique em ordem crescente;
// Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne a frase "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort(). Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.

const oddsAndEvens = [13, 3, 4, 10, 7, 2];
const sortOddsAndEvens = (array) => {
    const numbers = array.sort((a , b) => a - b);
    return numbers;
};

// console.log(`Os n√∫meros ${sortOddsAndEvens(oddsAndEvens)} se encontram em ordem crescernte`); // ser√° necess√°rio alterar essa linha üòâ

// Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.
// Na matem√°tica, o fatorial de um n√∫mero inteiro e positivo N, representado por N!, √© o produto de todos os seus antecessores at√© o n√∫mero um. Exemplo: 4! = 4 * 3 * 2 * 1 = 24.
// Com base nessas informa√ß√µes:
// Crie a fun√ß√£o factorial que recebe um n√∫mero como par√¢metro, utilizando arrow functions (Lembre-se de armazenar a fun√ß√£o utilizando o tipo de vari√°vel correta).
// Dentro da fun√ß√£o crie uma vari√°vel result.
// Crie a l√≥gica para retornar o fatorial de N!.
// Imprima no terminal "Esse √© o fatorial resultado da fun√ß√£o" (Lembre-se de utilizar template literals nesse momento).
// Dica: Armazene a chamada da fun√ß√£o em uma var√≠avel para imprimir no terminal seu resultado.
// B√¥nus: tente fazer o mesmo exerc√≠cio de forma recursiva. Spoiler: √â poss√≠vel resolver com uma linha usando ternary operator.

const fatorial = (number) => {
    let result = 1;
    for (let index = 2; index < number; index += 1) {
        result *= index
    }
    return result;
}
// console.log(`Esse √© o fatorial resultado da fun√ß√£o ${fatorial(10)}`)

//Crie uma fun√ß√£o que receba uma frase como par√¢metro e retorne a maior palavra da frase.

const maiorPalavra = (frase) => {
    const word = frase.split(' ');
    let maxLength = 0;
    let result = '';
    for (let index of word) {
        if (index.length > maxLength) {
            maxLength = index.length;
            result = index
        } 
    }
    return result;
}
console.log(maiorPalavra('ola meu chapa'))
